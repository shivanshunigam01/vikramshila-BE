import { ApiClient, ApiCallParameters, ApiCallParametersWithPagination, PageResult, FileBuffer } from '../api/api-client';
import { ApiClientOptions } from '../api/api-client-options';
/** Client to process the call to the API using Fetch API */
export declare class ApiFetchClient extends ApiClient {
    /**
     * Initialize your API Client instance with the provided configuration options.
     * Default request plugins: VersionRequest
     * Default response plugins: ExceptionResponse
     *
     * @param {ApiClientOptions} options - Configuration options for the API Client.
     */
    constructor(options: ApiClientOptions);
    /** @inheritdoc */
    processCall<T>(apiCallParameters: ApiCallParameters): Promise<T>;
    /** @inheritdoc */
    processCallWithPagination<T>(apiCallParameters: ApiCallParametersWithPagination): Promise<PageResult<T>>;
    /** @inheritdoc */
    processFileCall(apiCallParameters: ApiCallParameters): Promise<FileBuffer>;
    private executeRequest;
    private processResponse;
    private parseAndValidateResponse;
    private processFileResponse;
    /**
     * Handle fetch request with token refresh mechanism
     * @param {ApiCallParameters} apiCallParameters
     * @param {ErrorContext} errorContext
     */
    private sinchFetch;
    private isTokenExpired;
    private applyResponsePlugins;
    private loadResponsePlugins;
    private buildPageResult;
    private buildFetchError;
    private extractFileName;
}
