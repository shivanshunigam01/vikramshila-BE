"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildFlexibleOAuth2OrApiTokenApiClientOptions = exports.buildApplicationSignedApiClientOptions = exports.buildMailgunApiClientOptions = exports.buildOAuth2ApiClientOptions = void 0;
const plugins_1 = require("../plugins");
const buildOAuth2ApiClientOptions = (params, apiName) => {
    if (!params.projectId || !params.keyId || !params.keySecret) {
        throw new Error(`Invalid configuration for the ${apiName} API: "projectId", "keyId" and "keySecret" values must be provided`);
    }
    const apiClientOptions = {
        projectId: params.projectId,
        requestPlugins: [new plugins_1.Oauth2TokenRequest(params.keyId, params.keySecret, params.authHostname)],
        useServicePlanId: false,
    };
    addPlugins(apiClientOptions, params);
    return apiClientOptions;
};
exports.buildOAuth2ApiClientOptions = buildOAuth2ApiClientOptions;
const buildMailgunApiClientOptions = (params) => {
    if (!params.mailgunApiKey) {
        throw new Error('Invalid configuration for the Mailgun API: the "mailgunApiKey" must be provided');
    }
    const apiClientOptions = {
        requestPlugins: [
            new plugins_1.BasicAuthenticationRequest('api', params.mailgunApiKey),
        ],
    };
    addPlugins(apiClientOptions, params);
    return apiClientOptions;
};
exports.buildMailgunApiClientOptions = buildMailgunApiClientOptions;
const buildApplicationSignedApiClientOptions = (params, apiName) => {
    if (!params.applicationKey || !params.applicationSecret) {
        throw new Error(`Invalid configuration for the ${apiName} API: "applicationKey" and "applicationSecret" values must be provided`);
    }
    const apiClientOptions = {
        requestPlugins: [
            new plugins_1.XTimestampRequest(),
            new plugins_1.SigningRequest(params.applicationKey, params.applicationSecret),
        ],
    };
    addPlugins(apiClientOptions, params);
    return apiClientOptions;
};
exports.buildApplicationSignedApiClientOptions = buildApplicationSignedApiClientOptions;
const buildFlexibleOAuth2OrApiTokenApiClientOptions = (params) => {
    let apiClientOptions;
    if (params.servicePlanId && params.apiToken) {
        apiClientOptions = {
            projectId: params.servicePlanId,
            requestPlugins: [new plugins_1.ApiTokenRequest(params.apiToken)],
            useServicePlanId: true,
        };
        if (params.projectId || params.keyId || params.keySecret) {
            console.warn('As the servicePlanId and the apiToken are provided, all other credentials will be disregarded.');
        }
    }
    else if (params.projectId && params.keyId && params.keySecret) {
        apiClientOptions = {
            projectId: params.projectId,
            requestPlugins: [new plugins_1.Oauth2TokenRequest(params.keyId, params.keySecret, params.authHostname)],
            useServicePlanId: false,
        };
    }
    if (!apiClientOptions) {
        throw new Error('Invalid parameters for the SMS API: check your configuration');
    }
    addPlugins(apiClientOptions, params);
    return apiClientOptions;
};
exports.buildFlexibleOAuth2OrApiTokenApiClientOptions = buildFlexibleOAuth2OrApiTokenApiClientOptions;
const addPlugins = (apiClientOptions, params) => {
    if (params.requestPlugins && params.requestPlugins.length > 0) {
        if (!apiClientOptions.requestPlugins) {
            apiClientOptions.requestPlugins = [];
        }
        apiClientOptions.requestPlugins.push(...params.requestPlugins);
    }
    if (params.responsePlugins && params.responsePlugins.length > 0) {
        if (!apiClientOptions.responsePlugins) {
            apiClientOptions.responsePlugins = [];
        }
        apiClientOptions.responsePlugins.push(...params.responsePlugins);
    }
    return apiClientOptions;
};
//# sourceMappingURL=api-client-options-helper.js.map